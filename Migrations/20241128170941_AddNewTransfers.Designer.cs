// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SLICGL_IBT_Management.DB_Connection;

#nullable disable

namespace SLICGL_IBT_Management.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241128170941_AddNewTransfers")]
    partial class AddNewTransfers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SLICGL_IBT_Management.Models.AccountBalance", b =>
                {
                    b.Property<string>("BalanceID")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BalanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<decimal>("OutstandingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("BalanceID");

                    b.HasIndex("AccountID");

                    b.HasIndex("User_Id");

                    b.ToTable("AccountBalance");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.BalanceAdjustment", b =>
                {
                    b.Property<string>("AdjustmentID")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("AdjustBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<decimal>("AdjustedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AdjustedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Balance")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsReversed")
                        .HasColumnType("int");

                    b.Property<string>("ReversedBy")
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("TransferID")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("AdjustmentID");

                    b.HasIndex("AdjustBy");

                    b.HasIndex("Balance");

                    b.HasIndex("ReversedBy");

                    b.HasIndex("TransferID");

                    b.ToTable("BalanceAdjustment");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.Bank", b =>
                {
                    b.Property<string>("BankID")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankID");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.BankAccount", b =>
                {
                    b.Property<string>("AccountID")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("AccountBranch")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankID")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GLCode")
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("AccountID");

                    b.HasIndex("BankID");

                    b.HasIndex("User_Id");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.FundRequest", b =>
                {
                    b.Property<string>("RequestID")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(7)");

                    b.Property<int>("IsApproved")
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("PaymentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<decimal>("RemainingRequestAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RequestAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RequestBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PaymentID");

                    b.HasIndex("RequestBy");

                    b.ToTable("FundRequest");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.FundRequestAdjustments", b =>
                {
                    b.Property<string>("AdjustmentID")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("AdjustBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<decimal>("AdjustedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AdjustedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsReversed")
                        .HasColumnType("int");

                    b.Property<string>("RequestID")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("ReversedBy")
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("TransferID")
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("AdjustmentID");

                    b.HasIndex("AdjustBy");

                    b.HasIndex("RequestID");

                    b.HasIndex("ReversedBy");

                    b.HasIndex("TransferID")
                        .IsUnique()
                        .HasFilter("[TransferID] IS NOT NULL");

                    b.ToTable("FundRequestAdjustments");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.IBTSheet", b =>
                {
                    b.Property<string>("SheetID")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SheetID");

                    b.HasIndex("CreateBy");

                    b.ToTable("IBTSheet");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.OverdraftRecoverAdjustment", b =>
                {
                    b.Property<string>("AdjustmentID")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("AdjustBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<decimal>("AdjustedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AdjustedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BalanceID")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsReversed")
                        .HasColumnType("int");

                    b.Property<string>("RequestID")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("ReversedBy")
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("AdjustmentID");

                    b.HasIndex("AdjustBy");

                    b.HasIndex("BalanceID")
                        .IsUnique();

                    b.HasIndex("RequestID")
                        .IsUnique();

                    b.HasIndex("ReversedBy");

                    b.ToTable("OverdraftRecoverAdjustment");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.Payment", b =>
                {
                    b.Property<string>("PaymentID")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(7)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisteredBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentID");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("RegisteredBy");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.Repo", b =>
                {
                    b.Property<string>("RepoID")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.Property<decimal>("ClosedBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(7)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RepoType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RepoID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.ToTable("Repo");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.RepoBalanceAdjustment", b =>
                {
                    b.Property<string>("AdjustmentID")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("AdjustBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<decimal>("AdjustedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AdjustedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsReversed")
                        .HasColumnType("int");

                    b.Property<string>("Repo")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("ReversedBy")
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("TransferID")
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("AdjustmentID");

                    b.HasIndex("AdjustBy");

                    b.HasIndex("Repo");

                    b.HasIndex("ReversedBy");

                    b.HasIndex("TransferID");

                    b.ToTable("RepoBalanceAdjustment");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.TransferMethod", b =>
                {
                    b.Property<string>("MethodID")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(7)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("ReceivingAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("SendingAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("TransferOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("MethodID");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ReceivingAccount");

                    b.HasIndex("SendingAccount");

                    b.HasIndex("TransferOption");

                    b.ToTable("TransferMethod");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.TransferOption", b =>
                {
                    b.Property<string>("OptionID")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(7)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("OptionDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("OptionID");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeletedBy");

                    b.ToTable("TransferOption");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.Transfers", b =>
                {
                    b.Property<string>("TransferId")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("AccountBalance")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("FromBankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("IBTSheet")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("IsApproved")
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Payment")
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("ToBankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransferMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("TransferId");

                    b.HasIndex("AccountBalance");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("FromBankAccount");

                    b.HasIndex("IBTSheet");

                    b.HasIndex("Payment");

                    b.HasIndex("ToBankAccount");

                    b.HasIndex("TransferMethod");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.User", b =>
                {
                    b.Property<string>("User_Id")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create_Date_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Epf")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("User_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.UserCategory", b =>
                {
                    b.Property<string>("CategoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("UserCategory");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.UserCategoryAvailability", b =>
                {
                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("User_Id", "CategoryID");

                    b.ToTable("UserCategoryAvailability");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.AccountBalance", b =>
                {
                    b.HasOne("SLICGL_IBT_Management.Models.BankAccount", "IDAccount")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.User", "IDUser")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IDAccount");

                    b.Navigation("IDUser");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.BalanceAdjustment", b =>
                {
                    b.HasOne("SLICGL_IBT_Management.Models.User", "Adjuster")
                        .WithMany()
                        .HasForeignKey("AdjustBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.AccountBalance", "BalanceID")
                        .WithMany()
                        .HasForeignKey("Balance")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.User", "ReversedUser")
                        .WithMany()
                        .HasForeignKey("ReversedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SLICGL_IBT_Management.Models.Transfers", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Adjuster");

                    b.Navigation("BalanceID");

                    b.Navigation("ReversedUser");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.BankAccount", b =>
                {
                    b.HasOne("SLICGL_IBT_Management.Models.Bank", "IDBank")
                        .WithMany()
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("IDBank");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.FundRequest", b =>
                {
                    b.HasOne("SLICGL_IBT_Management.Models.BankAccount", "RequestedAccount")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SLICGL_IBT_Management.Models.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SLICGL_IBT_Management.Models.Payment", "PaymentRequest")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.User", "Requester")
                        .WithMany()
                        .HasForeignKey("RequestBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Deleter");

                    b.Navigation("PaymentRequest");

                    b.Navigation("RequestedAccount");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.FundRequestAdjustments", b =>
                {
                    b.HasOne("SLICGL_IBT_Management.Models.User", "Adjuster")
                        .WithMany()
                        .HasForeignKey("AdjustBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.FundRequest", "Request")
                        .WithMany("FundRequestAdjustments")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.User", "ReversedUser")
                        .WithMany()
                        .HasForeignKey("ReversedBy");

                    b.HasOne("SLICGL_IBT_Management.Models.Transfers", "Transfer")
                        .WithOne("RequestAdjustment")
                        .HasForeignKey("SLICGL_IBT_Management.Models.FundRequestAdjustments", "TransferID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Adjuster");

                    b.Navigation("Request");

                    b.Navigation("ReversedUser");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.IBTSheet", b =>
                {
                    b.HasOne("SLICGL_IBT_Management.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.OverdraftRecoverAdjustment", b =>
                {
                    b.HasOne("SLICGL_IBT_Management.Models.User", "Adjuster")
                        .WithMany()
                        .HasForeignKey("AdjustBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.AccountBalance", "Balance")
                        .WithOne("OverdraftRecoverAdjustment")
                        .HasForeignKey("SLICGL_IBT_Management.Models.OverdraftRecoverAdjustment", "BalanceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.FundRequest", "Request")
                        .WithOne("OverdraftRecoverAdjustment")
                        .HasForeignKey("SLICGL_IBT_Management.Models.OverdraftRecoverAdjustment", "RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.User", "ReversedUser")
                        .WithMany()
                        .HasForeignKey("ReversedBy");

                    b.Navigation("Adjuster");

                    b.Navigation("Balance");

                    b.Navigation("Request");

                    b.Navigation("ReversedUser");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.Payment", b =>
                {
                    b.HasOne("SLICGL_IBT_Management.Models.User", "IDUserDelete")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SLICGL_IBT_Management.Models.User", "IDUserRegistered")
                        .WithMany()
                        .HasForeignKey("RegisteredBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IDUserDelete");

                    b.Navigation("IDUserRegistered");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.Repo", b =>
                {
                    b.HasOne("SLICGL_IBT_Management.Models.BankAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleteBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.RepoBalanceAdjustment", b =>
                {
                    b.HasOne("SLICGL_IBT_Management.Models.User", "Adjuster")
                        .WithMany()
                        .HasForeignKey("AdjustBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.Repo", "IDRepo")
                        .WithMany()
                        .HasForeignKey("Repo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.User", "ReversedUser")
                        .WithMany()
                        .HasForeignKey("ReversedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SLICGL_IBT_Management.Models.Transfers", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Adjuster");

                    b.Navigation("IDRepo");

                    b.Navigation("ReversedUser");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.TransferMethod", b =>
                {
                    b.HasOne("SLICGL_IBT_Management.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SLICGL_IBT_Management.Models.BankAccount", "AccountReceiver")
                        .WithMany()
                        .HasForeignKey("ReceivingAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.BankAccount", "AccountSender")
                        .WithMany()
                        .HasForeignKey("SendingAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.TransferOption", "Option")
                        .WithMany()
                        .HasForeignKey("TransferOption")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountReceiver");

                    b.Navigation("AccountSender");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.TransferOption", b =>
                {
                    b.HasOne("SLICGL_IBT_Management.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.Transfers", b =>
                {
                    b.HasOne("SLICGL_IBT_Management.Models.AccountBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("AccountBalance")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SLICGL_IBT_Management.Models.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SLICGL_IBT_Management.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SLICGL_IBT_Management.Models.BankAccount", "FromAccount")
                        .WithMany()
                        .HasForeignKey("FromBankAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.IBTSheet", "Sheet")
                        .WithMany()
                        .HasForeignKey("IBTSheet")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.Payment", "TransferPayment")
                        .WithMany()
                        .HasForeignKey("Payment")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SLICGL_IBT_Management.Models.BankAccount", "ToAccount")
                        .WithMany()
                        .HasForeignKey("ToBankAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SLICGL_IBT_Management.Models.TransferMethod", "Method")
                        .WithMany()
                        .HasForeignKey("TransferMethod")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Balance");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("FromAccount");

                    b.Navigation("Method");

                    b.Navigation("Sheet");

                    b.Navigation("ToAccount");

                    b.Navigation("TransferPayment");
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.AccountBalance", b =>
                {
                    b.Navigation("OverdraftRecoverAdjustment")
                        .IsRequired();
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.FundRequest", b =>
                {
                    b.Navigation("FundRequestAdjustments");

                    b.Navigation("OverdraftRecoverAdjustment")
                        .IsRequired();
                });

            modelBuilder.Entity("SLICGL_IBT_Management.Models.Transfers", b =>
                {
                    b.Navigation("RequestAdjustment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
